pipeline {
    agent any
    environment {
        PATH = "$PATH:/usr/local/bin/"
        IMAGETAG = ""
    }
    tools {
        go '1.22.0'
    }
    triggers {
        GenericTrigger (
            causeString: 'Triggered on push', genericVariables: [[defaultValue: '', key: 'branch', regexpFilter: '', value: '$.push.changes[0].old.name']], printContributedVariables: true, printPostContent: true, regexpFilterExpression: '^(master)*?$', regexpFilterText: '$branch', token: 'demo', tokenCredentialId: ''
        )
    }
    stages {
        stage('Git Clone') {
            steps {
                // cleanWs()
                git branch: 'master', credentialsId: 'github-login', url: 'https://github.com/watri/my-monorepo.git'
            }
        }
        stage('Secret Scanning') {
            steps {
                script {
                    sh "trufflehog filesystem --json --no-update ${WORKSPACE}/service1 --fail > trufflehog_output.json"
                }
            }
        }
        stage('Test') {
            steps {
                sh 'cd service1 && go test'
            }
        }
        stage('Dockerfie Scan Hadolint') {
            steps {
                sh 'hadolint --config hadolint.yaml service1/Dockerfile'
            }
        }
        stage('SCA Using OWASP Dependency-Check') {
            steps {
                withCredentials([string(credentialsId: 'NVD-KEY', variable: 'NVD_KEY')]) {
                dependencyCheck additionalArguments: ''' 
                            -o './'
                            -s 'service1/'
                            -f 'ALL' 
                            --nvdApiKey=${NVD_KEY}
                            --prettyPrint
                            ''', odcInstallation: 'OWASP dependency-check'
                
                dependencyCheckPublisher pattern: 'dependency-check-report.xml'
                }
            }
        }
        stage('SAST Using Sonarcloud') {
            environment {
                SCANNER_HOME = tool 'sonarcloud5'
                ORGANIZATION = "watri"
                PROJECT_NAME = "watri_demo"
            }
            steps {
                withSonarQubeEnv('sonarcloud') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.organization=$ORGANIZATION \
                        -Dsonar.projectName=service1 \
                        -Dsonar.java.binaries=target/classes \
                        -Dsonar.projectKey=$PROJECT_NAME \
                        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
                        -Dsonar.exclusions=*.html
                        '''
                }
            }
        }
        stage("Quality Gate"){
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    script {
                        def qg = waitForQualityGate() 
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
        stage('Build Image') {
            steps {
                script{
                    IMAGETAG = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim() + BUILD_NUMBER
                    echo "Image Tag: ${IMAGETAG}"
                }
                sh "docker build -t watri/service1:${IMAGETAG} -f service1/Dockerfile ."
            }
        }
        stage('Image Scan Trivy') {
            steps {
                sh "trivy image --cache-dir /var/lib/jenkins/trivy/ --config trivy.yaml watri/service1:${IMAGETAG}"
            }
        }
        stage('Push Image to Registry') {
            steps {
                withDockerRegistry([ credentialsId: 'docker-hub-cred', url: '' ]) {
                sh  "docker push watri/service1:${IMAGETAG}"
                }
            }
        }     
        stage('Deploy to Cluster') {
            steps {
                sh '''
                #!/bin/bash
                sed -i "s|latest|${IMAGETAG}|g" deployment/service1/deployment.yaml 
                kubectl config use-context docker-desktop && kubectl apply -f deployment/service1/deployment.yaml 
                '''

                sh '''
                #!/bin/bash
                echo "Deployment Check Development"
                kubectl config use-context docker-desktop && kubectl rollout status deployment/service1-deployment -n prod --timeout=300s
                '''
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'result.html, trufflehog_output.json', followSymlinks: false
        }
        success {
            echo 'I succeeded!'
            bitbucketStatusNotify(buildState: 'SUCCESSFUL')
            googlechatnotification url: 'https://chat.googleapis.com/v1/spaces', message: 'Service1 deploy SUCCESS \nJenkins uri : ${BUILD_URL}', notifyAborted: 'false', notifyFailure: 'false', notifyNotBuilt: 'false', notifySuccess: 'true', notifyUnstable: 'false', notifyBackToNormal: 'false', suppressInfoLoggers: 'true', sameThreadNotification: 'false'
        }
        unstable {
            echo 'I am unstable :('
            bitbucketStatusNotify(buildState: 'UNSTABLE')
            googlechatnotification url: 'https://chat.googleapis.com/v1/spaces', message: 'Service1 deploy UNSTABLE \nJenkins uri : ${BUILD_URL}', notifyAborted: 'false', notifyFailure: 'false', notifyNotBuilt: 'false', notifySuccess: 'false', notifyUnstable: 'true', notifyBackToNormal: 'false', suppressInfoLoggers: 'true', sameThreadNotification: 'false'
        }
        failure {
            echo 'I failed :(('
            bitbucketStatusNotify(buildState: 'FAILED')
            googlechatnotification url: 'https://chat.googleapis.com/v1/spaces', message: 'Service1 deploy FAILED \nJenkins uri : ${BUILD_URL}', notifyAborted: 'false', notifyFailure: 'true', notifyNotBuilt: 'false', notifySuccess: 'false', notifyUnstable: 'false', notifyBackToNormal: 'false', suppressInfoLoggers: 'true', sameThreadNotification: 'false'
        }
    }
}